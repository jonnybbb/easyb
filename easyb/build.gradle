
// ToDo:
// - cobertura coverage
// - actual tests of BDD
// - build artifacts (jar, source, javadocs)
// - release (prepare/perform like maven)
// - build distribution (xdoclet)
import org.gradle.api.tasks.util.PatternFilterable;
import org.gradle.api.tasks.util.PatternSet;

buildscript {
  repositories {
    mavenRepo urls: 'http://gradle.artifactoryonline.com/gradle/plugins'
    dependencies {
      classpath "org.gradle.plugins:gradle-idea-plugin:0.2"
    }
  }
}

buildDirName = 'target'

println "Build dir is ${buildDir}"

apply plugin: 'groovy'
apply plugin: 'org.gradle.idea'

sourceCompatibility = 1.5
version = '0.9.8.4'

// really 
repositories {
  mavenCentral()
}


dependencies {
  compile "commons-cli:commons-cli:1.2:@jar"
  compile "org.apache.ant:ant:[1.8.0,1.8.99):@jar"
  groovy "org.codehaus.groovy:groovy-all:[1.7.0, 1.7.99):@jar"
}

// override the source directories
sourceSets {
  main {
    groovy {
      srcDir 'src/groovy'
      srcDir 'src/java'
      srcDir 'src/ant'
    }
    resources {
      srcDir 'src/resources'
    }
  }

  test {
    groovy {
      srcDir 'behavior/groovy'
      srcDir 'behavior/java'
    }
    resources {
      srcDir 'behavior/resources'
    }
  }
}

task distribution(dependsOn:'test') {

}

task release(dependsOn:'distribution') {

}

task compile(dependsOn:'compileGroovy') {
  println "compiling"
}

// easyb plugin allows us to rip the Ant out of this build
apply plugin: EasybPlugin

easyb {
  def reportsoutputdir = "target/report"
  
  report(location: "${reportsoutputdir}/easyb-report.html", format: "html")
  report(location: "${reportsoutputdir}/easyb-report.xml", format: "xml")
  report(location: "${reportsoutputdir}/story-report.txt", format: "txtstory")

  behaviors(dir:"behavior/groovy") {
    include( "**/*Story.groovy")
    include("**/*.story")

    exclude( "**/TextStoryReportingValidation.story")
    exclude( "**/FailureReport.story")
    exclude( "**/PassingPendingFailingStory.story")
    exclude( "**/PassingPendingFailing.specification")
    exclude( "**/ExceptionalOccurrence.story")
    exclude( "**/HtmlReportingStory.groovy")
    exclude( "**/Issue116.story")
    exclude( "**/Ignore*.story")
    exclude("**/OneTimeFixture*.story")
    exclude( "**/WhenUsingPlugin*.story")
  }
}

class EasybPlugin implements Plugin<Project> {
  def void apply(Project project) {
    project.convention.plugins.easyb = new EasybConvention()  // the holder for our configuration

    project.task("bdd") {
      dependsOn("test") // we need the code in main and test to be built before this happens

      doLast {
        // get the config
        EasybConvention easyb = project.convention.plugins.easyb

        // TODO: we need to be able to load easyb classes (BehaviorRunner, Configuration) so we can
        // actually run the tests now
      
        // iterate over it to allow us to run that behavior
        easyb.behaviors.each { dir, files ->
          project.fileTree(dir).matching(files.patternSet).visit { FileVisitDetails f ->
            if ( !f.file.isDirectory() )
              println f.file
          }
        }

      }
    }
  }
}


class EasybConvention {

  Map reports = [:]
  Map behaviors = [:]

  public easyb(Closure c) {
    c.delegate = this
    c()
  }

  public behaviors(Map location, Closure actions) {
    def b = new EasybFiles()
    this.behaviors[location.dir] = b

    actions.setDelegate(b)
    actions.call() // call them thar methods

    println "behavior ${location.dir} are ${b.patternSet}"
  }

  public report(map) {
    reports[ map.format ] = map.location
    
    println "${map.format} at ${map.location}"
  }
}

class EasybFiles {
  PatternSet patternSet = new PatternSet();
  
  public exclude(String... pattern) {
    patternSet.exclude(pattern)
  }

  public include(String... pattern) {
    patternSet.include(pattern)
  }
}
