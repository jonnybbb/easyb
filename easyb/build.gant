includeTool << gant.tools.Ivy

version = "0.7a"
defaultdir = "target"
libdir = "${defaultdir}/lib"
jarincludes = "**/*.jar"
classdir = "${defaultdir}/classes"
sourcedir = "src/java"
gsourcedir = "src/groovy"
antsourcedir = "src/ant"
gbehaviordir = "behavior/groovy"
behaviordir =  "behavior/java"
behaviorclassdir = "${defaultdir}/behavior-classes"
homedir = System.properties.'user.home'
mavenrepo = "${homedir}/.m2/repository"

target(clean:"cleans target dir"){
	Ant.delete(dir:defaultdir)
}

Ant.path(id:"build.classpath"){
	fileset(dir:libdir, includes:jarincludes)
}

target(configuregroovy:"configures environment to compile w/Groovy"){
 depends(init)
 Ant.taskdef(name:"groovyc",
    classname:"org.codehaus.groovy.ant.Groovyc", classpathref:"build.classpath"){
 }
}

target(getdeps:"retrieves dependencies"){
  Ivy.configure(file:"./ivyconfig.xml")
  Ivy.retrieve(pattern:"./target/lib/[artifact]-[revision].[ext]")
}

target(init:"init dirs"){
	Ant.mkdir(dir:classdir)
	Ant.mkdir(dir:libdir)
	Ant.mkdir(dir:behaviorclassdir)
	getdeps()
}

target("default":"Default task is to run the test suite."){
   	depends("validate")
}


target(release:"compile and archive"){
  depends("validate")

  Ant.mkdir(dir:"${defaultdir}/release")
  Ant.copy(file:"${defaultdir}/easyb-${version}.jar", todir:"${defaultdir}/release")
  Ant.copy(todir:"${defaultdir}/release"){
  	fileset(dir:"./target/lib/"){
  		exclude(name:"**/ant-*.jar")
  	}
  }
}

target(dist:"create a distribution from the release"){
	depends("release")

	def tarfilename = "${defaultdir}/dist/easyb-${version}.tar"

	Ant.mkdir(dir:"${defaultdir}/dist")
	Ant.tar(tarfile:tarfilename, basedir:"${defaultdir}/release")
    Ant.gzip(zipfile:"${tarfilename}.gz", src:tarfilename)
    Ant.delete(file:tarfilename)
}

target(jar:"archive project"){
   depends("compile-all")
   Ant.jar(destfile:"${defaultdir}/easyb-${version}.jar", basedir:classdir)
}

target("compile-all":"compile Groovy & Java classes"){
	depends("compile-core")
	depends("compile-behaviors")
	
}

target("compile-core":"compile Groovy & Java classes in easyb core"){
	depends(configuregroovy)
	genericgroovyc([sourcedir, gsourcedir, antsourcedir], classdir)
}

target("compile-behaviors":"compile Groovy & Java classes in easyb behavior"){
	depends(configuregroovy)
	depends("compile-core")
	genericgroovyc([behaviordir, gbehaviordir], behaviorclassdir)
}

genericgroovyc = { sourcedirs, destination ->
  Ant.groovyc(destdir:destination, jointCompilationOptions:"-j -Jsource=1.5 -Jtarget=1.5"){
    src() {
      sourcedirs.each() {
        dirset(dir:it)        
      }
    }
    classpath(){
	    fileset(dir:libdir){
	      include(name:jarincludes)
	    }
	    dirset(dir:classdir)
	  }
	}
}

target("validate":"runs behaviors"){
  depends("ant-task")
}


target("ant-task":"runs the easyb ant task"){
  	depends(jar)

	Ant.taskdef(name:"easyb", classname:"org.disco.easyb.ant.SpecificationRunnerTask"){
		classpath(){
        	pathelement(location:"${defaultdir}/easyb-${version}.jar")
    	}
	}

	Ant.easyb(failureProperty:"easyb.failed"){
	
    	classpath() {
        	fileset(dir:libdir, includes:jarincludes)
        	pathelement(location:"${defaultdir}/easyb-${version}.jar")
        	pathelement(location:behaviorclassdir)
      	}
      	

		report(location:"${defaultdir}/behavior-report.xml", format:"xmlbehavior")
	    report(location:"${defaultdir}/story-report.txt", format:"txtstory")

//		report(location:"${defaultdir}/behavior-report.txt", format:"txtbehavior")
//   	report(location:"${defaultdir}/story-report.xml", format:"xmlstory")

    	behaviors(dir:gbehaviordir){
	        include(name:"**/*Story.groovy")
	        include(name:"**/*Behavior.groovy")
	         include(name:"**/*name.groovy")
		}
	}

  	Ant.fail(if:"easyb.failed", message:"Execution halted as behaviors failed")
}

target("install-maven":"install easyb into the default local maven 2 repository") {
    depends(dist)

	Ant.copy(file: "${defaultdir}/easyb-${version}.jar", toDir: "${mavenrepo}/org/easyb/easyb/${version}/")
	
	def reader = new FileReader("pom-template.xml")
	def writer = new FileWriter("${mavenrepo}/org/easyb/easyb/${version}/easyb-${version}.pom")
	
	reader.transformLine(writer) { line ->
	    line.replace("VERSION", version)
	}
}