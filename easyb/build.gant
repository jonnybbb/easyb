/**
 * Master easyb core build
 */
includeTargets << new File("default_tasks.gant")

/**
 * Properties needed by default tasks
 */
artifactid = "easyb"
version = detectOrDefaultVersion("0.8.3")
sourcedirs = [gsourcedir, sourcedir, antsourcedir]

/**
 * Project specific properties
 */
tarfilename = "${defaultdir}/dist/${artifactid}-${version}.tar"


Ant.property(file: 'local.build.properties')

/**  
 * The version number used by all targets is command line overridden if needed- for example
 * if you need to create a snapshot version, you can type gant -Dversion=snapshot jar and 
 * the resultant jar file will be easyb-snapshot.jar instead of reading the default value
 * of version from above.
 */
def detectOrDefaultVersion(version) {
  if(Ant.project.properties."version" != null){
	  return Ant.project.properties."version"
  }else{
  	return version
  }
}

target("default":"validate"){
   	depends("validate")
}

target(release:"compile and archive"){
  depends("validate")

  Ant.mkdir(dir:"${defaultdir}/release")
  Ant.copy(file:"${defaultdir}/easyb-${version}.jar", todir:"${defaultdir}/release")
  Ant.copy(todir:"${defaultdir}/release"){
  	fileset(dir:"./target/lib/"){
  		exclude(name:"**/ant-*.jar")
  	}
  }
}

target(jar:"create an archive of the project's classfiles"){
   depends("compile-all")
   
   Ant.jar(destfile:"${defaultdir}/easyb-${version}.jar", basedir:classdir)
}

target("publish-easyb":"uploads easyb distribution to googlecode") {
  depends(dist)

  Ant.fail(unless:"googleuser", message:"Property googleuser not set. Please pass in with -D or set in local.build.properties")
  Ant.fail(unless:"googlepass", message:"Property googlepass not set. Please pass in with -D or set in local.build.properties")


  Ant.taskdef(name:"easyb", classname:"org.disco.easyb.ant.BehaviorRunnerTask"){
    classpath(){
          pathelement(location:"${defaultdir}/easyb-${version}.jar")
      }
  }

  Ant.taskdef (name:"googlecodeupload",
          classname:"net.bluecow.googlecode.ant.GoogleCodeUploadTask"){
    classpath(){
          pathelement(location:"${libdir}/ant-googlecode-0.0.0test.jar")
      }
  }

  Ant.googlecodeupload(username:"${Ant.project.properties.'googleuser'}",
          password:"${Ant.project.properties.'googlepass'}",
          projectname:"easyb",
          filename:"${tarfilename}.gz",
          targetfilename:"${tarfilename}.gz",
          summary:"easyb ${version} release")
          
}

target("compile-all":"compile Groovy & Java classes"){
	depends("compile-core")
	depends("compile-behaviors")
}

target("compile-core":"compile Groovy & Java classes in easyb core"){
	depends(configuregroovy)
	genericgroovyc([sourcedir, gsourcedir, antsourcedir], classdir)
}

target("compile-behaviors":"compile Groovy & Java classes in easyb behavior"){
	depends(configuregroovy)
	depends("compile-core")
	genericgroovyc([behaviordir, gbehaviordir], behaviorclassdir)
}

target("validate":"runs behaviors"){
  depends("ant-task")
}

target("ant-task":"runs the easyb ant task"){
  depends(jar)

	Ant.taskdef(name:"easyb", classname:"org.disco.easyb.ant.BehaviorRunnerTask"){
		classpath(){
        	pathelement(location:"${defaultdir}/easyb-${version}.jar")
    	}
	}

	Ant.easyb(failureProperty:"easyb.failed"){
	
      classpath() {
        fileset(dir:libdir, includes:jarincludes)
        pathelement(location:"${defaultdir}/easyb-${version}.jar")
        pathelement(location:behaviorclassdir)
      }

      report(location:"${defaultdir}/easyb-report.xml", format:"xml")
      report(location:"${defaultdir}/story-report.txt", format:"txtstory")
      report(location:"${defaultdir}/specification-report.txt", format:"txtspecification")

      behaviors(dir:gbehaviordir){
        include(name:"**/*Story.groovy")
        include(name:"**/*.story")
	    include(name:"**/*Specification.groovy")
	    include(name:"**/*.specification")
	    exclude(name:"**/TextStoryReportingValidation.story")
	    exclude(name:"**/FailureReport.story")
	  }
	}

  Ant.fail(if:"easyb.failed", message:"Execution halted as specifications failed")
}


target("validate-reports":"runs the easyb and validates reports"){
	  depends("ant-task")
	   runAntTask(["**/AndChainedFeature.story"], 
			   [["${defaultdir}/valid-report.txt", "txtstory"]])
	   
	   Ant.echo("***********Ignore FAILURE text that follows-- it is on purpose************")		   
	   runAntTask(["**/FailureReport.story"], 
			   [["${defaultdir}/valid-report-failure.txt", "txtstory"]])	
	   Ant.echo("***********End failure text-- build should continue on as usual***********")	
	   
	   runAntTask(["**/TextStoryReportingValidation.story"], 
			   [["${defaultdir}/valid-reporting.txt", "txtstory"]],
			   "Execution halted as specifications failed with respect to reports",
                "failure.reporting")
		
}
/**
 * runs easyb ant task and allows for failure if
 * failureMessage isn't null
 */
def runAntTask(includes, reports, failureMessage=null, failureprop=null){
	
	Ant.taskdef(name:"easyb", classname:"org.disco.easyb.ant.BehaviorRunnerTask"){
		classpath(){
        	pathelement(location:"${defaultdir}/easyb-${version}.jar")
    	}
	}

	Ant.easyb(failureProperty:failureprop){
      classpath() {
        fileset(dir:libdir, includes:jarincludes)
        pathelement(location:"${defaultdir}/easyb-${version}.jar")
        pathelement(location:behaviorclassdir)
      }
      reports.each{
    	  report(location:it[0], format:it[1])
      }
	
      behaviors(dir:gbehaviordir){
    	  includes.each{
    		  include(name:"${it}")
    	  }
	  }
	}
	if(failureMessage != null){
		Ant.fail(if:failureprop, message:failureMessage)
	}
}