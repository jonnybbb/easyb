/**
 * Master easyb core build
 */

ant.property(file: '../easyb-version.properties')

ivySettingsFile = "../ivysettings.xml"

includeTargets << new File("default_tasks.gant")


/**
 * Properties needed by default tasks
 */
artifactid = "easyb"
version = detectOrDefaultVersion("0.9.8")
sourcedirs = [gsourcedir, sourcedir, antsourcedir]

/**
 * Project specific properties
 */
tarfilename = "${defaultdir}/dist/${artifactid}-${version}.tar"


ant.property(file: 'local.build.properties')

/**
 * The version number used by all targets is command line overridden if needed- for example
 * if you need to create a snapshot version, you can type gant -Dversion=snapshot jar and 
 * the resultant jar file will be easyb-snapshot.jar instead of reading the default value
 * of version from above.
 */
def detectOrDefaultVersion(version) {
  if (ant.project.properties."version" != null) {
    return ant.project.properties."version"
  } else {
    return version
  }
}

target("default": "validate-behaviors") {
  depends("validate-behaviors")
}

target("generate-pom":"generates pom file for this project") {
  def pomTemplate = new File("pom-template.xml")

  if ( pomTemplate.exists() ) {
    def text = pomTemplate.text
    def binding = [version:version]

    def engine = new groovy.text.SimpleTemplateEngine()
    def template = engine.createTemplate(text).make(binding)

    new File("${defaultdir}/easyb-${version}.pom").write template.toString()
  }
}


target("local-release-force":"compile and release them to the repository, only use if you are sure all tests pass") {
  depends("jar")
  depends("jar-sources")
  depends("jar-javadocs")
  depends("ivy-publish")

}

target("mvn":"mvn commands") {
  depends("generate-pom")
  def cmds = ["""mvn install:install-file -Dpackaging=jar -Dversion=${version} -DartifactId=easyb -DgroupId=org.easyb -DpomFile=${defaultdir}/easyb-${version}.pom -Dfile=${defaultdir}/easyb-${version}.jar""",
      """mvn install:install-file -Dpackaging=jar -Dversion=${version} -DartifactId=easyb -DgroupId=org.easyb -DpomFile=${defaultdir}/easyb-${version}.pom -Dclassifier=sources -Dfile=${defaultdir}/easyb-${version}-sources.jar""",
      """mvn install:install-file -Dpackaging=jar -Dversion=${version} -DartifactId=easyb -DgroupId=org.easyb -DpomFile=${defaultdir}/easyb-${version}.pom -Dclassifier=javadocs -Dfile=${defaultdir}/easyb-${version}-javadocs.jar"""]

  cmds.each { cmd ->
    println cmd
    def proc = cmd.execute()
    proc.waitFor()
    println proc.in.text
    println proc.err.text
  }
}


target("local-release":"compile, validate and release them to our own repository so other builds can use them") {
  depends("validate")
  depends("jar-sources")
  depends("jar-javadocs")
  depends("ivy-publish")
}

target(release: "compile and archive") {
  depends("local-release")
  
  ant.mkdir(dir: "${defaultdir}/release")

  ant.copy(file:"./docs/dist/readme.txt", todir:"${defaultdir}/release/")
  ant.copy(file:"./docs/dist/LICENSE", todir:"${defaultdir}/release/")

  ant.mkdir(dir: "${defaultdir}/release/lib")
  ant.mkdir(dir: "${defaultdir}/release/docs")
  ant.copy(todir:"${defaultdir}/release/docs"){
    fileset(dir: "./docs/website")
  }
  ant.mkdir(dir: "${defaultdir}/release/examples")
  ant.copy(todir:"${defaultdir}/release/examples"){
    fileset(dir: "./behavior/groovy/"){
      include(name:"**/*.groovy")
    }
  }

  ant.copy(file: "${defaultdir}/easyb-${version}.jar", todir: "${defaultdir}/release")
  ant.copy(file: "${defaultdir}/easyb-${version}-sources.jar", todir: "${defaultdir}/release")
  ant.copy(file: "${defaultdir}/easyb-${version}-javadocs.jar", todir: "${defaultdir}/release")
  ant.copy(file: "${defaultdir}/ivy-${version}.xml", todir: "${defaultdir}/release")

  ant.copy(todir: "${defaultdir}/release/lib") {
    fileset(dir: "./target/lib/") {
      include(name: "**/commons-cli-*.jar")
      include(name: "**/groovy-all-*.jar")
    }
  }
  new File("${defaultdir}/release/lib/").eachFile{ fl ->
    fl.renameTo(new File("${defaultdir}/release/lib/${fl.name[0..-9]}.jar"))
  }

}

target(jar: "create an archive of the project's classfiles") {
  depends("compile-all")

  ant.jar(destfile: "${defaultdir}/easyb-${version}.jar", basedir: classdir)
  //ant.jar(destfile: "${defaultdir}/easyb-${version}.jar", basedir: cfgdir, update: true, excludes: "resource/thirdparty/docbook/**/*")
  ant.jar(destfile: "${defaultdir}/easyb-${version}.jar", basedir: resourcesdir, update: true)
}


target("bundle-docs": "creates a war file containing static html docs") {
  depends(doc)
  ant.war(destfile: "${defaultdir}/docs/ROOT.war", needxmlfile: false) {
    fileset(dir: websiteoutputdir) {
      include(name: "**/*.*")
    }
  }
}

target("publish-easyb": "uploads easyb distribution to googlecode") {
  depends(dist)

  ant.fail(unless: "googleuser", message: "Property googleuser not set. Please pass in with -D or set in local.build.properties")
  ant.fail(unless: "googlepass", message: "Property googlepass not set. Please pass in with -D or set in local.build.properties")


  ant.taskdef(name: "easyb", classname: "org.easyb.ant.BehaviorRunnerTask") {
    classpath() {
      pathelement(location: "${defaultdir}/easyb-${version}.jar")
    }
  }

  ant.taskdef(name: "googlecodeupload",
          classname: "net.bluecow.googlecode.ant.GoogleCodeUploadTask") {
    classpath() {
      pathelement(location: "${libdir}/ant-googlecode-0.0.0test.jar")
    }
  }

  ant.googlecodeupload(username: "${ant.project.properties.'googleuser'}",
          password: "${ant.project.properties.'googlepass'}",
          projectname: "easyb",
          filename: "${tarfilename}.gz",
          targetfilename: "${tarfilename}.gz",
          summary: "easyb ${version} release")

}

target("compile-all": "compile Groovy & Java classes") {
  depends("compile-core")
  depends("compile-behaviors")
}

target("compile-core": "compile Groovy & Java classes in easyb core") {
  depends(configuregroovy)
  genericgroovyc([sourcedir, gsourcedir, antsourcedir, resourcesdir], classdir)
}

target("compile-behaviors": "compile Groovy & Java classes in easyb behavior") {
  depends(configuregroovy)
  depends("compile-core")
  genericgroovyc([behaviordir, gbehaviordir], behaviorclassdir)
  copy(todir: behaviorclassdir) {
    fileset(dir: resourcebehaviordir)
  }
}

target("validate": "runs and validates both, behaviors and reports") {
  depends("validate-behaviors")
  depends("validate-reports")
  depends("validate-categories-feature")
}

private def validateBehaviors(easybLocation) {

  ant.easyb(failureProperty: "easyb.failed", failureFile: "${defaultdir}/failures.txt", parallel: false) {

    classpath() {
      fileset(dir: libdir, includes: jarincludes)
      pathelement(location: easybLocation)
      pathelement(location: behaviorclassdir)
    }

    report(location: "${reportsoutputdir}/easyb-report.html", format: "html")
    report(location: "${reportsoutputdir}/easyb-report.xml", format: "xml")
    report(location: "${reportsoutputdir}/easyb-junit-report.xml", format: "junit")
    report(location: "${reportsoutputdir}/story-report.txt", format: "txtstory")
    report(location: "${reportsoutputdir}/specification-report.txt", format: "txtspecification")


    behaviors(dir: gbehaviordir) {

      if (ant.project.properties."behavior" != null) {
        include(name: "**/${ant.project.properties.'behavior'}.*")
      } else {

        include(name: "**/*Story.groovy")
        include(name: "**/*.story")
        include(name: "**/*Specification.groovy")
        include(name: "**/*.specification")

        exclude(name: "**/TextStoryReportingValidation.story")
        exclude(name: "**/FailureReport.story")
        exclude(name: "**/PassingPendingFailingStory.story")
        exclude(name: "**/PassingPendingFailing.specification")
        exclude(name: "**/ExceptionalOccurrence.story")
        exclude(name: "**/HtmlReportingStory.groovy")
        exclude(name: "**/Issue116.story")
      }
    }
  }

  ant.fail(if: "easyb.failed", message: "Execution halted as specifications failed")
}

target("coverage":"runs code coverage across tests") {
  depends('compile-core')
  depends('jar')

  ivy.cachepath(pathid:'ivy.coverage.classpath', conf:"coverage")

  ant.taskdef(resource:'tasks.properties') {
    classpath() {
      path(refid:"ivy.coverage.classpath")
    }
  }

  ant.delete(file:"./cobertura.ser")
  ant.mkdir(dir:"target/target-inst")

  'cobertura-instrument'(datafile:'./cobertura.ser', todir:'target/target-inst') {
    includeClasses(regex:'.*')

    instrumentationClasspath() {
      pathelement(location: "${defaultdir}/easyb-${version}.jar")
    }
  }


  ant.taskdef(name: "easyb", classname: "org.easyb.ant.BehaviorRunnerTask") {
    classpath() {
      pathelement(location: "target/target-inst/easyb-${version}.jar")
      path(refid:"ivy.coverage.classpath")
    }
  }

  // run behaviors
  validateBehaviors("target/target-inst/easyb-${version}.jar")


  // now issue reports
  ant.mkdir(dir:'target/reports/coverage-report')
  // we have 3 different source directories and we need them in one place for the source directory so we
  // can see the report properly
  def instrumentedSrc = 'target/reports/coverage-report/src'
  ant.mkdir(dir:instrumentedSrc)

  copy(todir: instrumentedSrc) {
    fileset(dir: sourcedir)
    fileset(dir: gsourcedir)
    fileset(dir: antsourcedir)
  }
  

  'cobertura-report'(format:'html', datafile:'./cobertura.ser', destdir:'target/reports/coverage-report',
      srcdir:instrumentedSrc+'/')
}



target("validate-behaviors": "runs and validates the easyb behaviors") {
  depends(jar)

  ant.taskdef(name: "easyb", classname: "org.easyb.ant.BehaviorRunnerTask") {
    classpath() {
      pathelement(location: "${defaultdir}/easyb-${version}.jar")
    }
  }

  validateBehaviors("${defaultdir}/easyb-${version}.jar")
}


target("validate-norun-feature": "runs and validates the non executable stories") {
  depends(jar)

  ant.taskdef(name: "easyb", classname: "org.easyb.ant.BehaviorRunnerTask") {
    classpath() {
      pathelement(location: "${defaultdir}/easyb-${version}.jar")
    }
  }

  ant.easyb(failureProperty: "easyb.failed", failureFile: "${defaultdir}/failures.txt", noExecute: true) {

    classpath() {
      fileset(dir: libdir, includes: jarincludes)
      pathelement(location: "${defaultdir}/easyb-${version}.jar")
      pathelement(location: behaviorclassdir)
    }

    report(location: "${reportsoutputdir}/easyb-report.html", format: "html")
    report(location: "${reportsoutputdir}/easyb-report.xml", format: "xml")
    report(location: "${reportsoutputdir}/easyb-junit-report.xml", format: "junit")
    report(location: "${reportsoutputdir}/story-report.txt", format: "txtstory")



    behaviors(dir: gbehaviordir) {

      if (ant.project.properties."behavior" != null) {
        include(name: "**/${ant.project.properties.'behavior'}.*")
      } else {

        include(name: "**/*Story.groovy")
        include(name: "**/*.story")        

        exclude(name: "**/TextStoryReportingValidation.story")
        exclude(name: "**/FailureReport.story")
        exclude(name: "**/PassingPendingFailingStory.story")
        exclude(name: "**/PassingPendingFailing.specification")
        exclude(name: "**/ExceptionalOccurrence.story")
        exclude(name: "**/HtmlReportingStory.groovy")
        exclude(name: "**/Issue116.story")
        exclude(name: "**/Ignore*.story")
        exclude(name: "**/OneTimeFixture*.story")
        exclude(name: "**/WhenUsingPlugin*.story")
      }
    }
  }

  ant.fail(if: "easyb.failed", message: "Execution halted as specifications failed")
}


target("validate-categories-feature": "runs and validates categories") {
  depends(jar)

  ant.taskdef(name: "easyb", classname: "org.easyb.ant.BehaviorRunnerTask") {
    classpath() {
      pathelement(location: "${defaultdir}/easyb-${version}.jar")
    }
  }

  ant.easyb(failureProperty: "easyb.failed", failureFile: "${defaultdir}/failures.txt",
          noExecute: false, tags: "A") {

    classpath() {
      fileset(dir: libdir, includes: jarincludes)
      pathelement(location: "${defaultdir}/easyb-${version}.jar")
      pathelement(location: behaviorclassdir)
    }

    report(location: "${reportsoutputdir}/easyb-report.html", format: "html")
    report(location: "${reportsoutputdir}/easyb-report.xml", format: "xml")
    report(location: "${reportsoutputdir}/easyb-junit-report.xml", format: "junit")
    report(location: "${reportsoutputdir}/story-report.txt", format: "txtstory")

    behaviors(dir: gbehaviordir) {
      if (ant.project.properties."behavior" != null) {
        include(name: "**/${ant.project.properties.'behavior'}.*")
      } else {
        include(name: "**/*Story.groovy")
        include(name: "**/*.story")
      }
    }
  }

  ant.fail(if: "easyb.failed", message: "Execution halted as behaviors failed")
}


target("validate-reports": "runs and validates the easyb reports") {
  runAntTask(["**/AndChainedFeature.story"],
          [["${reportsoutputdir}/valid-report.txt", "txtstory"]])

  ant.echo("***********Ignore FAILURE text that follows-- it is on purpose************")
  runAntTask(["**/FailureReport.story"],
          [["${reportsoutputdir}/valid-report-failure.txt", "txtstory"]])
  ant.echo("***********End failure text-- build should continue on as usual***********")

  runAntTask(["**/TextStoryReportingValidation.story"],
          [["${reportsoutputdir}/valid-reporting.txt", "txtstory"]],
          "Execution halted as specifications failed with respect to reports",
          "failure.reporting")
}
/**
 * runs easyb ant task and allows for failure if
 * failureMessage isn't null
 */
def runAntTask(includes, reports, failureMessage = null, failureprop = null) {

  ant.taskdef(name: "easyb", classname: "org.easyb.ant.BehaviorRunnerTask") {
    classpath() {
      pathelement(location: "${defaultdir}/easyb-${version}.jar")
    }
  }

  ant.easyb(failureProperty: failureprop) {
    classpath() {
      fileset(dir: libdir, includes: jarincludes)
      pathelement(location: "${defaultdir}/easyb-${version}.jar")
      pathelement(location: behaviorclassdir)
    }
    reports.each {
      report(location: it[0], format: it[1])
    }

    behaviors(dir: gbehaviordir) {
      includes.each {
        include(name: "${it}")
      }
    }
  }
  if (failureMessage != null) {
    ant.fail(if: failureprop, message: failureMessage)
  }
}

target("run-main": "runs easyb BehaviorRunner class") {
  depends(jar)
  java(classname: "org.easyb.BehaviorRunner", fork: true) {
    if (ant.project.properties."behavior" != null) {
      arg(value: ant.project.properties."behavior")
    }
    //arg(value: "-ef")
    //arg(line: "-txtstory myout.txt")
    //arg(line: "-f myfailures.text")
    // arg(line: "-f /Users/aglover/Development/groovy/easyb-0.9.5/easyb/easyb/target/failure-files.txt")
    //arg(line: "-outfail myfailures.text")
    classpath() {
      fileset(dir: libdir, includes: jarincludes)
      pathelement(location: behaviorclassdir)
      pathelement(location: "${defaultdir}/easyb-${version}.jar")
    }
  }
}
