/**
 * Master easyb core build
 */
includeTargets << new File("default_tasks.gant")

/**
 * Properties needed by default tasks
 */
artifactid = "easyb"
version = detectOrDefaultVersion("0.9.6")
sourcedirs = [gsourcedir, sourcedir, antsourcedir]

/**
 * Project specific properties
 */
tarfilename = "${defaultdir}/dist/${artifactid}-${version}.tar"


ant.property(file: 'local.build.properties')

/**
 * The version number used by all targets is command line overridden if needed- for example
 * if you need to create a snapshot version, you can type gant -Dversion=snapshot jar and 
 * the resultant jar file will be easyb-snapshot.jar instead of reading the default value
 * of version from above.
 */
def detectOrDefaultVersion(version) {
  if (ant.project.properties."version" != null) {
    return ant.project.properties."version"
  } else {
    return version
  }
}

target("default": "validate-behaviors") {
  depends("validate-behaviors")
}

target(release: "compile and archive") {
  depends("validate")

  ant.mkdir(dir: "${defaultdir}/release")
  ant.copy(file: "${defaultdir}/easyb-${version}.jar", todir: "${defaultdir}/release")
  ant.copy(todir: "${defaultdir}/release") {
    fileset(dir: "./target/lib/") {
      exclude(name: "**/ant-*.jar")
    }
  }
}

target(jar: "create an archive of the project's classfiles") {
  depends("compile-all")

  ant.jar(destfile: "${defaultdir}/easyb-${version}.jar", basedir: classdir)
  ant.jar(destfile: "${defaultdir}/easyb-${version}.jar", basedir: cfgdir, update: true, excludes:"resource/thirdparty/docbook/**/*")
}


target("bundle-docs": "creates a war file containing static html docs") {
  depends(doc)
  ant.war(destfile: "${defaultdir}/docs/ROOT.war", needxmlfile: false) {
    fileset(dir: websiteoutputdir) {
      include(name: "**/*.*")
    }
  }
}

target("publish-easyb": "uploads easyb distribution to googlecode") {
  depends(dist)

  ant.fail(unless: "googleuser", message: "Property googleuser not set. Please pass in with -D or set in local.build.properties")
  ant.fail(unless: "googlepass", message: "Property googlepass not set. Please pass in with -D or set in local.build.properties")


  ant.taskdef(name: "easyb", classname: "org.easyb.ant.BehaviorRunnerTask") {
    classpath() {
      pathelement(location: "${defaultdir}/easyb-${version}.jar")
    }
  }

  ant.taskdef(name: "googlecodeupload",
          classname: "net.bluecow.googlecode.ant.GoogleCodeUploadTask") {
    classpath() {
      pathelement(location: "${libdir}/ant-googlecode-0.0.0test.jar")
    }
  }

  ant.googlecodeupload(username: "${ant.project.properties.'googleuser'}",
          password: "${ant.project.properties.'googlepass'}",
          projectname: "easyb",
          filename: "${tarfilename}.gz",
          targetfilename: "${tarfilename}.gz",
          summary: "easyb ${version} release")

}

target("compile-all": "compile Groovy & Java classes") {
  depends("compile-core")
  depends("compile-behaviors")
}

target("compile-core": "compile Groovy & Java classes in easyb core") {
  depends(configuregroovy)
  genericgroovyc([sourcedir, gsourcedir, antsourcedir], classdir)
}

target("compile-behaviors": "compile Groovy & Java classes in easyb behavior") {
  depends(configuregroovy)
  depends("compile-core")
  genericgroovyc([behaviordir, gbehaviordir], behaviorclassdir)
  copy(todir: behaviorclassdir) {
    fileset(dir: resourcebehaviordir)
  }
}

target("validate": "runs and validates both, behaviors and reports") {
  depends("validate-behaviors")
  depends("validate-reports")
}

target("validate-behaviors": "runs and validates the easyb behaviors") {
  depends(jar)

  ant.taskdef(name: "easyb", classname: "org.easyb.ant.BehaviorRunnerTask") {
    classpath() {
      pathelement(location: "${defaultdir}/easyb-${version}.jar")
    }
  }

  ant.easyb(failureProperty: "easyb.failed") {

    classpath() {
      fileset(dir: libdir, includes: jarincludes)
      pathelement(location: "${defaultdir}/easyb-${version}.jar")
      pathelement(location: behaviorclassdir)
    }

    report(location: "${reportsoutputdir}/easyb-report.html", format: "html")
    report(location: "${reportsoutputdir}/easyb-report.xml", format: "xml")
    report(location: "${reportsoutputdir}/story-report.txt", format: "txtstory")
    report(location: "${reportsoutputdir}/specification-report.txt", format: "txtspecification")


    behaviors(dir: gbehaviordir) {

      if (ant.project.properties."behavior" != null) {
        include(name: "**/${ant.project.properties.'behavior'}.*")
      } else {

        include(name: "**/*Story.groovy")
        include(name: "**/*.story")
        include(name: "**/*Specification.groovy")
        include(name: "**/*.specification")

        exclude(name: "**/TextStoryReportingValidation.story")
        exclude(name: "**/FailureReport.story")
        exclude(name: "**/PassingPendingFailing.story")
        exclude(name: "**/PassingPendingFailing.specification")
        exclude(name: "**/ExceptionalOccurrence.story")
        exclude(name: "**/HtmlReportingStory.groovy")
      }
    }
  }

  ant.fail(if: "easyb.failed", message: "Execution halted as specifications failed")
}


target("validate-reports": "runs and validates the easyb reports") {
  runAntTask(["**/AndChainedFeature.story"],
          [["${reportsoutputdir}/valid-report.txt", "txtstory"]])

  ant.echo("***********Ignore FAILURE text that follows-- it is on purpose************")
  runAntTask(["**/FailureReport.story"],
          [["${reportsoutputdir}/valid-report-failure.txt", "txtstory"]])
  ant.echo("***********End failure text-- build should continue on as usual***********")

  runAntTask(["**/TextStoryReportingValidation.story"],
          [["${reportsoutputdir}/valid-reporting.txt", "txtstory"]],
          "Execution halted as specifications failed with respect to reports",
          "failure.reporting")
}
/**
 * runs easyb ant task and allows for failure if
 * failureMessage isn't null
 */
def runAntTask(includes, reports, failureMessage = null, failureprop = null) {

  ant.taskdef(name: "easyb", classname: "org.easyb.ant.BehaviorRunnerTask") {
    classpath() {
      pathelement(location: "${defaultdir}/easyb-${version}.jar")
    }
  }

  ant.easyb(failureProperty: failureprop) {
    classpath() {
      fileset(dir: libdir, includes: jarincludes)
      pathelement(location: "${defaultdir}/easyb-${version}.jar")
      pathelement(location: behaviorclassdir)
    }
    reports.each {
      report(location: it[0], format: it[1])
    }

    behaviors(dir: gbehaviordir) {
      includes.each {
        include(name: "${it}")
      }
    }
  }
  if (failureMessage != null) {
    ant.fail(if: failureprop, message: failureMessage)
  }
}

target("run-main": "runs easyb BehaviorRunner class") {
  depends(jar)
  java(classname: "org.easyb.BehaviorRunner", fork: true) {
    if (ant.project.properties."behavior" != null) {
      arg(value: ant.project.properties."behavior")
    }
    if (ant.project.properties."extstory" != null) {
      arg(line: "-extstory org.easyb.bdd.prototype.PrototypePlugin")
    }
    //arg(value: "-ef")
    classpath() {
      fileset(dir: libdir, includes: jarincludes)
      pathelement(location: behaviorclassdir)
      pathelement(location: "${defaultdir}/easyb-${version}.jar")
    }
  }
}
