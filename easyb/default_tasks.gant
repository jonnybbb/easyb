/**
 * this is a default set of tasks
 * that other projects within easyb
 * can include. See easyb core build
 * file for an example
 */

includeTool << gant.tools.Ivy

defaultdir = "target"
libdir = "${defaultdir}/lib"
jarincludes = "**/*.jar"
classdir = "${defaultdir}/classes"
behaviorclassdir = "${defaultdir}/behavior-classes"
resourcebehaviordir = "behavior/resources"
gbehaviordir = "behavior/groovy"
gsourcedir = "src/groovy"
sourcedir = "src/java"
antsourcedir = "src/ant"
resourcesdir = "src/resources"
behaviordir = "behavior/java"
homedir = System.properties.'user.home'
cfgdir = "cfg"
mavenrepo = "${homedir}/.m2/repository"
reportsoutputdir = "${defaultdir}/reports"

docsoutputdir = "${defaultdir}/docs"
websiteoutputdir = "${docsoutputdir}/website"

target(clean: "cleans target dir") {
    ant.delete(dir: defaultdir)
}


target(dist: "create a distribution from the release") {
    depends(release)
    depends(doc)

    //move resultant doc to release directory
    ant.copy(file:"${docsoutputdir}/easyb_guide/easyb_guide-${version}.pdf",
            todir:"${defaultdir}/release")


    ant.mkdir(dir: "${defaultdir}/dist")
    ant.tar(tarfile: tarfilename, basedir: "${defaultdir}/release")
    ant.gzip(zipfile: "${tarfilename}.gz", src: tarfilename)
    ant.delete(file: tarfilename)
}

target(configuregroovy: "configures environment to compile w/Groovy") {
    depends(init)

    ivy.cachepath(pathid:'ivy.build.classpath', conf:"compile")

    ant.taskdef(name: "groovyc",
            classname: "org.codehaus.groovy.ant.Groovyc") {
      classpath() {
        path(refid:"ivy.build.classpath")
      }
    }
}

target(doc: "create documenation from docbook") {
  depends("init-doc")

  ant.tstamp {
    format(property: "build.date", pattern: "MM/dd/yyyy")
    format(property: "build.year", pattern: "yyyy")
  }

  if ( new File("${docbooksourcedir}").exists()) {

    new File("${docbooksourcedir}").eachDir { docbooksourcedirectory ->
      docbooksourcexmlfile = new File(docbooksourcedirectory, 'docbook.xml')
      if(docbooksourcexmlfile.exists()) {

        ant.echo("Creating docbook [${docbooksourcedirectory.name}]")

        docbookdestdir = "${docsoutputdir}/${docbooksourcedirectory.name}"
        ant.mkdir(dir: docbookdestdir)

        ant.copy(todir: docbookdestdir) {
          filterset {
            filter(token: "docbook.base", value: new File(docbooksupportdir).canonicalPath)
            filter(token: "docbook.project.name", value: artifactid)
            filter(token: "docbook.project.version", value: version)
            filter(token: "build.date", value: "${ant.project.properties.'build.date'}")
            filter(token: "build.year", value: "${ant.project.properties.'build.year'}")
          }
          filterset(begintoken: "%{", endtoken: "}") {
            filter(token: "at", value: "@")
          }
          fileset(dir: docbooksourcedirectory) {
            include(name: "**/*.xml")
          }
        }

        ant.copy(toDir: docbookdestdir) {
          fileset(dir: docbooksourcedirectory) {
            include(name: "**/*")
            exclude(name: "**/*.xml")

          }
        }

        ant.mkdir(dir: "${docbookdestdir}/images")
        ant.copy(todir: "${docbookdestdir}/images") {
          fileset(dir: "${docbooksupportdir}/xsl/images") {
            include(name: "**/*")
          }
        }

        docbookdisplayname = docbooksourcedirectory.name.replaceAll(/_/, " ")
        partialhtml = new File("${docbookdestdir}/partial.html") << """
          <h1>${docbookdisplayname}</h1>
          <ul>
            <li><a href="docbook.html">html version</a></li>
            <li><a href="${docbooksourcedirectory.name}.pdf">pdf version</a></li>
          </ul>
        """

        // create the xsl/fo temporary file.
        ant.java(classname: "com.icl.saxon.StyleSheet", fork:"true", dir:".", maxmemory:"256m") {
          classpath(refid: "docbook.lib.classpath")
          arg(value: "-o")
          arg(value: "${docbookdestdir}/docbook_fop.tmp")
          arg(value: "${docbookdestdir}/docbook.xml")
          arg(value: "${new File(docbooksupportdir).canonicalPath}/easyb_fopdf.xsl")
          arg(value: "project.version=${version}")
          arg(value: "build.year=${ant.project.properties.'build.year'}")
          arg(value: "build.date=${ant.project.properties.'build.date'}")
        }

        ant.java(classname: "org.apache.fop.cli.Main", fork:"true", dir:".") {
          classpath(refid: "docbook.lib.classpath")
          arg(value: "${docbookdestdir}/docbook_fop.tmp")
          arg(value: "${docbookdestdir}/${docbooksourcedirectory.name}-${version}.pdf")
        }


        ant.java(classname: "com.icl.saxon.StyleSheet", fork: "true", dir: ".", maxmemory: "256m") {
          classpath(refid: "docbook.lib.classpath")
          arg(value: "-o")
          arg(value: "${docbookdestdir}/docbook.html")
          arg(value: "${docbookdestdir}/docbook.xml")
          arg(value: "${new File(docbooksupportdir).canonicalPath}/easyb_xhtml.xsl")
          arg(value: "project.version=${version}")
          arg(value: "build.year=${ant.project.properties.'build.year'}")
          arg(value: "build.date=${ant.project.properties.'build.date'}")
        }

        [new File("${docbookdestdir}/docbook_fop.tmp"), new File("${docbookdestdir}/docbook.xml")].each{ it.delete() }

      }
    }
  }

}

target("init-doc": "initialize the doc environment") {
  docbooksourcedir = "docs/docbook"
  docbooksupportdir = "cfg/resource/thirdparty/docbook"

  ant.mkdir(dir: docsoutputdir)
  ant.mkdir(dir: websiteoutputdir)


  ivy.cachepath(pathid:'docbook.lib.classpath', conf:"docbook")

//  ant.path(id: "docbook.lib.classpath") {
//    fileset(dir: "repository/docbook-dependencies") {
//      include(name: "**/*.jar")
//    }
//  }

  ant.copy(todir: websiteoutputdir){
    fileset(dir:"./docs/website/"){
      include(name:"**/*.*")
    }
  }
}

target("ivy-publish": "Publishes artifacts to ivy repository") {
  ivy.publish(resolver:"chained", pubrevision:"${version}", status:"release", update:true, overwrite:true)
}

target(getdeps: "retrieves dependencies") {
  echo( "Loading Ivy Settings from ${ivySettingsFile}")


  ivy.settings(file: ivySettingsFile, id: "ivy.instance")
    // unable to prevent sources and javadoc from coming do
  ivy.retrieve(pattern: "./target/lib/[artifact]-[revision]-[type].[ext]")
}

target(init: "init dirs") {
    ant.mkdir(dir: classdir)
    ant.mkdir(dir: libdir)
    ant.mkdir(dir: behaviorclassdir)
    ant.mkdir(dir: defaultdir)
    ant.mkdir(dir: reportsoutputdir)
    getdeps()
}

genericgroovyc = {sourcedirs, destination ->
    ant.groovyc(destdir: destination) {
        javac(source: "1.5", target: "1.5", debug: "on")
        src() {
            sourcedirs.each() {
                dirset(dir: it)
            }
        }
      classpath() {
        path(refid:"ivy.build.classpath")
        dirset(dir: classdir)
      }
    }
}

target("jar-sources": "creates a sources jar") {
    depends("init")

    ant.jar(destfile: "${defaultdir}/${artifactid}-${version}-sources.jar") {
        sourcedirs.each {
            fileset(dir: it)
        }
    }
}

target("jar-javadocs": "creates a javadocs jar") {
    taskdef(name: 'groovydoc', classname: 'org.codehaus.groovy.ant.Groovydoc')

    // Groovydoc doesn't seem to support multiple sources at this time so combine them on disk first
    ant.copy(toDir: "${defaultdir}/javadoc-sources") {
        sourcedirs.each {
            fileset(dir: it)
        }
    }

    ant.groovydoc(destdir: "${defaultdir}/javadoc", sourcepath: "${defaultdir}/javadoc-sources", windowtitle: "${artifactid}")
    ant.jar(destfile: "${defaultdir}/${artifactid}-${version}-javadocs.jar") {
        fileset(dir: "${defaultdir}/javadoc")
    }
}

target("maven-install": "install into the default local maven repository") {
    depends(jar)
    depends("jar-sources")
    depends("jar-javadocs")

    def reader = new FileReader("pom-template.xml")
    def writer = new FileWriter("${defaultdir}/${artifactid}-${version}.pom")

    reader.transformLine(writer) {line ->
        line.replace("VERSION", version.toString())
    }

    ant.path(id: "maven.artifacts") {
        fileset(dir: "${defaultdir}") {
            include(name: "${artifactid}-${version}*.jar")
            include(name: "${artifactid}-${version}*.pom")
        }
    }
    ant.copy(toDir: "${mavenrepo}/org/easyb/${artifactid}/${version}/") {
        path(refid: "maven.artifacts")
    }
}

target("maven-bundle": "creates an upload bundle for the central maven repository") {
    depends("maven-install")

    ant.jar(destfile: "${defaultdir}/${artifactid}-${version}-bundle.jar") {
        path(refid: "maven.artifacts")
    }
}
