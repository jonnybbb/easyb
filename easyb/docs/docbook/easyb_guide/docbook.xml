<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"file:////@docbook.base@/dtd/docbookx.dtd">
<book>
  <bookinfo>
    <title>@docbook.project.name@ User Guide</title>

    <pubdate>@build.date@</pubdate>

    <copyright>
      <year>Copyright @build.year@ easyb.org</year>
    </copyright>

    <releaseinfo>@docbook.project.version@</releaseinfo>

    <author>
      <surname>easyb Development Team</surname>

      <email><ulink
      url="mailto:easyb-users@googlegroups.com">easyb-users@googlegroups.com
      </ulink></email>
    </author>
  </bookinfo>

  <chapter>
    <title>Overview</title>

    <para>easyb is a behavior driven development framework for the Java
    platform. By using a Domain Specific Language, easyb aims to enable
    executable, yet readable documentation.</para>

    <section>
      <title>History</title>

      <para>Behavior driven development (or BDD) isn't anything new or
      revolutionary-- it's just an evolutionary offshoot of test driven
      development, in which the word test is replaced by the word should.
      Semantics aside, a lot of people have found that the concept of should
      is a much more natural development driver than the concept of testing.
      In fact, when you think in terms of behavior (i.e. shoulds) you'll find
      that writing specifications is easier to do first, which is the intent
      of test driven development in the first place.</para>
    </section>

    <section>
      <title>Goals</title>

      <orderedlist>
        <listitem>
          <para>test</para>
        </listitem>
      </orderedlist>
    </section>
  </chapter>

  <chapter>
    <title>Syntax</title>

    <indexterm class="startofrange" id="ix.syntax">
      <primary>Syntax Specification</primary>
    </indexterm>

    <para>easyb contains a rich language for capturing behaviors as executable
    documentation.</para>

    <section>
      <title>Stories</title>

      <indexterm class="startofrange" id="ix.syntax.stories">
        <primary>Syntax Specification</primary>

        <secondary>Stories</secondary>
      </indexterm>

      <para>TODO</para>

      <variablelist>
        <formalpara>
          <title>scenario</title>

          <indexterm>
            <primary>scenario</primary>
          </indexterm>

          <para>illustrate a specific aspepct of behavior of the
          application<programlisting>scenario "description here", {
  ...
}</programlisting></para>
        </formalpara>

        <formalpara>
          <title>given, andGiven</title>

          <indexterm>
            <primary>given</primary>
          </indexterm>

          <indexterm>
            <primary>andGiven</primary>

            <see>given</see>
          </indexterm>

          <para>a context specific to this scenario. Object and Data setup
          will often happen in a given.<programlisting>scenario "scenario description here", {
  given "given description here", {
    // given impl here
  }
 
  andGiven "andGiven description here", {
    // andGiven impl here
  }

  ...
}</programlisting></para>
        </formalpara>

        <formalpara>
          <title>when</title>

          <indexterm>
            <primary>when</primary>
          </indexterm>

          <para>an action to be taken.<programlisting>scenario "scenario description here", {
  ...

  when "when description here", {
    // when impl here
  }

  ...
}</programlisting></para>
        </formalpara>

        <formalpara>
          <title>then, andThen</title>

          <indexterm>
            <primary>then</primary>
          </indexterm>

          <indexterm>
            <primary>andThen</primary>

            <see>then</see>
          </indexterm>

          <para>validation of expected outcome.<programlisting>scenario "scenario description here", {
  ...

  then "then description here", {
    // then impl here
  }

  andThen "andThen description here", {
    // andThen impl here
  }

  ...
}</programlisting></para>
        </formalpara>

        <formalpara>
          <title>narrative</title>

          <indexterm>
            <primary>narrative</primary>
          </indexterm>

          <para>gives a bried description of what is to be delivered. provides
          a container for other narrative components.<programlisting>narrative "narrative description here", {
  ...
}

scenario "scenario description here"  ...</programlisting></para>
        </formalpara>

        <formalpara>
          <title>as_a</title>

          <indexterm>
            <primary>as_a</primary>
          </indexterm>

          <para>part of a narrative. an aspect that describes the person, or
          thing, that will benefit from the feature.<programlisting>narrative "narrative description here", {
  as_a "role description here"
  ...
}</programlisting></para>
        </formalpara>

        <formalpara>
          <title>i_want</title>

          <indexterm>
            <primary>i_want</primary>
          </indexterm>

          <para>part of a narrative. describes something that the system
          should do or a feature in business terms and not in terms of
          technology<programlisting>narrative "narrative description here", {
  ...
  i_want "feature description here"
  ...
}</programlisting></para>
        </formalpara>

        <formalpara>
          <title>so_that</title>

          <indexterm>
            <primary>so_that</primary>
          </indexterm>

          <para>part of a narrative. describes the business value accrued from
          this feature.<programlisting>narrative "narrative description here", {
  ...
  so_that "benefit description here"
}</programlisting></para>
        </formalpara>
      </variablelist>

      <indexterm class="endofrange" startref="ix.syntax.stories" />
    </section>

    <section>
      <title>Specifications</title>

      <indexterm class="startofrange" id="ix.syntax.specifications">
        <primary>Syntax Specification</primary>

        <secondary>Specifications</secondary>
      </indexterm>

      <para>TODO</para>

      <itemizedlist>
        <listitem>
          <para>it</para>
        </listitem>
      </itemizedlist>

      <indexterm class="endofrange" startref="ix.syntax.specifications" />
    </section>

    <section>
      <title>Common</title>

      <indexterm class="startofrange" id="ix.syntax.common">
        <primary>Syntax Specification</primary>

        <secondary>Common</secondary>
      </indexterm>

      <para>TODO</para>

      <itemizedlist>
        <listitem>
          <para>and</para>
        </listitem>

        <listitem>
          <para>before</para>
        </listitem>

        <listitem>
          <para>before_each</para>
        </listitem>

        <listitem>
          <para>after</para>
        </listitem>

        <listitem>
          <para>after_each</para>
        </listitem>
      </itemizedlist>

      <indexterm class="endofrange" startref="ix.syntax.common" />
    </section>

    <section>
      <title>Assertions</title>

      <indexterm class="startofrange" id="ix.syntax.assertions">
        <primary>Syntax Specification</primary>

        <secondary>Assertions</secondary>
      </indexterm>

      <para />

      <section>
        <title>should</title>

        <para />

        <itemizedlist>
          <listitem>
            <para>shouldBe</para>
          </listitem>

          <listitem>
            <para>shouldEqual</para>
          </listitem>

          <listitem>
            <para>shouldBeEqual</para>
          </listitem>

          <listitem>
            <para>shouldBeEqualTo</para>
          </listitem>

          <listitem>
            <para>shouldNotBe</para>
          </listitem>

          <listitem>
            <para>shouldNotEqual</para>
          </listitem>

          <listitem>
            <para>shouldNotBeEqual</para>
          </listitem>

          <listitem>
            <para>shouldNotBeEqualTo</para>
          </listitem>

          <listitem>
            <para>shouldBeA</para>
          </listitem>

          <listitem>
            <para>shouldBeAn</para>
          </listitem>

          <listitem>
            <para>shouldNotBeA</para>
          </listitem>

          <listitem>
            <para>shouldNotBeAn</para>
          </listitem>

          <listitem>
            <para>shouldBeGreaterThan</para>
          </listitem>

          <listitem>
            <para>shouldBeLessThan</para>
          </listitem>

          <listitem>
            <para>shouldHave</para>
          </listitem>

          <listitem>
            <para>shouldNotHave</para>
          </listitem>
        </itemizedlist>

        <indexterm class="endofrange" startref="ix.syntax.assertions" />
      </section>

      <section>
        <title>ensure</title>

        <indexterm class="startofrange" id="ix.syntax.ensure">
          <primary>Syntax Specification</primary>

          <secondary>ensure</secondary>
        </indexterm>

        <para />

        <itemizedlist>
          <listitem>
            <para>isNull</para>
          </listitem>

          <listitem>
            <para>isNotNull</para>
          </listitem>

          <listitem>
            <para>isA&lt;class type&gt;</para>
          </listitem>

          <listitem>
            <para>isEqualTo(value)</para>
          </listitem>

          <listitem>
            <para>isEqualTo&lt;value&gt;</para>
          </listitem>

          <listitem>
            <para>isNotEqualTo(value)</para>
          </listitem>

          <listitem>
            <para>isNotEqualTo&lt;value&gt;</para>
          </listitem>

          <listitem>
            <para>isTrue</para>
          </listitem>

          <listitem>
            <para>isFalse</para>
          </listitem>
        </itemizedlist>

        <indexterm class="endofrange" startref="ix.syntax.ensure" />
      </section>

      <section>
        <title>common</title>

        <para />

        <itemizedlist>
          <listitem>
            <para>contains</para>
          </listitem>

          <listitem>
            <para>has</para>
          </listitem>

          <listitem>
            <para>ensureThrows</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <indexterm class="endofrange" startref="ix.syntax" />
  </chapter>

  <chapter>
    <title>Appendix</title>

    <section>
      <title>Glossary<anchor id="glossary" /></title>

      <glosslist>
        <glossentry>
          <glossterm>BDD</glossterm>

          <glossdef>
            <para>See Behavior Driven Development</para>
          </glossdef>
        </glossentry>

        <glossentry>
          <glossterm>Behavior Driven Development</glossterm>

          <glossdef>
            <para>Agile software development technique that encourages
            collaboration between developers, QA and non-technical or business
            participants in a software project. It was originally conceived in
            2003 by Dan North [1] as a response to Test Driven Development,
            and has evolved over the last few years. The focus of BDD is the
            language and interactions used in the process of software
            development. Behavior-driven developers use their native language
            in combination with the ubiquitous language of Domain Driven
            Design to describe the purpose and benefit of their code. This
            allows the developers to focus on why the code should be created,
            rather than the technical details, and minimizes translation
            between the technical language in which the code is written and
            the domain language spoken by the business, users, stakeholders,
            project management etc. (Courtesy:
            http://en.wikipedia.org/wiki/Behavior_driven_development)</para>
          </glossdef>
        </glossentry>

        <glossentry>
          <glossterm>Story</glossterm>

          <glossdef>
            <para>Description of a requirement, which has an associated
            benefit and criteria for validation. Contains any of the following
            components: scenario, given, when then. It also may contain a
            narrative with the following components: narrative, as_a, i_want,
            so_that.</para>
          </glossdef>
        </glossentry>
      </glosslist>

      <para></para>
    </section>
  </chapter>

  <index></index>
</book>
