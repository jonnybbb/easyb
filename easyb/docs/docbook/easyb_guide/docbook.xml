<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"file:////@docbook.base@/dtd/docbookx.dtd">
<book>
  <bookinfo>
    <title>@docbook.project.name@ User Guide</title>

    <pubdate>@build.date@</pubdate>

    <copyright>
      <year>Copyright @build.year@ easyb.org</year>
    </copyright>

    <releaseinfo>@docbook.project.version@</releaseinfo>

    <author>
      <surname>easyb Development Team</surname>

      <email><ulink
      url="mailto:easyb-users@googlegroups.com">easyb-users@googlegroups.com
      </ulink></email>
    </author>
  </bookinfo>

  <chapter>
    <title>Overview</title>

    <para>easyb is a behavior driven development framework for the Java
    platform. By using a Domain Specific Language, easyb aims to enable
    executable, yet readable documentation.</para>

    <section>
      <title>History</title>

      <para>Behavior driven development (or BDD) isn't anything new or
      revolutionary-- it's just an evolutionary offshoot of test driven
      development, in which the word test is replaced by the word should.
      Semantics aside, a lot of people have found that the concept of should
      is a much more natural development driver than the concept of testing.
      In fact, when you think in terms of behavior (i.e. shoulds) you'll find
      that writing specifications is easier to do first, which is the intent
      of test driven development in the first place.</para>
    </section>

    <section>
      <title>Goals</title>

      <orderedlist>
        <listitem>
          <para>test</para>
        </listitem>
      </orderedlist>
    </section>
  </chapter>

  <chapter>
    <title>Syntax</title>

    <indexterm class="startofrange" id="ix.syntax">
      <primary>Syntax Specification</primary>
    </indexterm>

    <para>easyb contains a rich language for capturing behaviors as executable
    documentation.</para>

    <section>
      <title>Stories</title>

      <indexterm class="startofrange" id="ix.syntax.stories">
        <primary>Syntax Specification</primary>

        <secondary>Stories</secondary>
      </indexterm>

      <para>These entries are normally found within a Story file.</para>

      <variablelist>
        <formalpara>
          <title>scenario</title>

          <indexterm>
            <primary>scenario</primary>
          </indexterm>

          <para>Illustrate a specific aspepct of behavior of the
          application<itemizedlist>
              <listitem>
                <formalpara>
                  <title>Appears</title>

                  <para>Inside story file. Multiple may be included in a
                  single story file.</para>
                </formalpara>
              </listitem>

              <listitem>
                <programlisting>scenario "description here", {
  ...
}</programlisting>
              </listitem>
            </itemizedlist></para>
        </formalpara>

        <formalpara>
          <title>given, andGiven</title>

          <indexterm>
            <primary>given</primary>
          </indexterm>

          <indexterm>
            <primary>andGiven</primary>

            <see>given</see>
          </indexterm>

          <para>Context specific to this scenario. Object and Data setup will
          often happen in a given.<itemizedlist>
              <listitem>
                <formalpara>
                  <title>Appears</title>

                  <para>Inside scenario. Multiple may appear in each scenario.
                  Also appears directly in a story file outside of a scenario
                  (not recommended).</para>
                </formalpara>
              </listitem>

              <listitem>
                <programlisting>scenario "scenario description here", {
  given "given description here", {
    // given impl here
  }
 
  andGiven "andGiven description here", {
    // andGiven impl here
  }

  ...
}</programlisting>
              </listitem>
            </itemizedlist></para>
        </formalpara>

        <formalpara>
          <title>when</title>

          <indexterm>
            <primary>when</primary>
          </indexterm>

          <para>An action to be taken.<itemizedlist>
              <listitem>
                <formalpara>
                  <title>Appears</title>

                  <para>Inside scenario. Follows any givens. Multiple may
                  appear in each scenario. Also appears directly in a story
                  file outside of a scenario (not recommended).</para>
                </formalpara>
              </listitem>

              <listitem>
                <programlisting>scenario "scenario description here", {
  ...

  when "when description here", {
    // when impl here
  }

  ...
}</programlisting>
              </listitem>
            </itemizedlist></para>
        </formalpara>

        <formalpara>
          <title>then, andThen</title>

          <indexterm>
            <primary>then</primary>
          </indexterm>

          <indexterm>
            <primary>andThen</primary>

            <see>then</see>
          </indexterm>

          <para>Validation of expected outcome.<itemizedlist>
              <listitem>
                <formalpara>
                  <title>Appears</title>

                  <para>Inside scenario. Follows any whens. Multiple may
                  appear in each scenario. Also appears directly in a story
                  file outside of a scenario (not recommended).</para>
                </formalpara>
              </listitem>

              <listitem>
                <programlisting>scenario "scenario description here", {
  ...

  then "then description here", {
    // then impl here
  }

  andThen "andThen description here", {
    // andThen impl here
  }

  ...
}</programlisting>
              </listitem>
            </itemizedlist></para>
        </formalpara>

        <formalpara>
          <title>narrative</title>

          <indexterm>
            <primary>narrative</primary>
          </indexterm>

          <para>Gives a bried description of what is to be delivered. Provides
          a container for other narrative components.<itemizedlist>
              <listitem>
                <formalpara>
                  <title>Appears</title>

                  <para>Inside a story, preferably at the top. Only one can
                  appear in each story.</para>
                </formalpara>
              </listitem>

              <listitem>
                <programlisting>narrative "narrative description here", {
  ...
}

scenario "scenario description here"  ...</programlisting>
              </listitem>
            </itemizedlist></para>
        </formalpara>

        <formalpara>
          <title>as_a</title>

          <indexterm>
            <primary>as_a</primary>
          </indexterm>

          <para>An aspect that describes the person, or thing, that will
          benefit from the feature.<itemizedlist>
              <listitem>
                <formalpara>
                  <title>Appears</title>

                  <para>Inside narrative, prior to i_want.</para>
                </formalpara>
              </listitem>

              <listitem>
                <programlisting>narrative "narrative description here", {
  as_a "role description here"
  ...
}</programlisting>
              </listitem>
            </itemizedlist></para>
        </formalpara>

        <formalpara>
          <title>i_want</title>

          <indexterm>
            <primary>i_want</primary>
          </indexterm>

          <para>Describes something that the system should do or a feature in
          business terms and not in terms of technology<itemizedlist>
              <listitem>
                <formalpara>
                  <title>Appears</title>

                  <para>Inside narrative, following as_a.</para>
                </formalpara>
              </listitem>

              <listitem>
                <programlisting>narrative "narrative description here", {
  ...
  i_want "feature description here"
  ...
}</programlisting>
              </listitem>
            </itemizedlist></para>
        </formalpara>

        <formalpara>
          <title>so_that</title>

          <indexterm>
            <primary>so_that</primary>
          </indexterm>

          <para>Describes the business value accrued from this
          feature.<itemizedlist>
              <listitem>
                <formalpara>
                  <title>Appears</title>

                  <para>Inside narrative, following i_want.</para>
                </formalpara>
              </listitem>

              <listitem>
                <programlisting>narrative "narrative description here", {
  ...
  so_that "benefit description here"
}</programlisting>
              </listitem>
            </itemizedlist></para>
        </formalpara>
      </variablelist>

      <indexterm class="endofrange" startref="ix.syntax.stories" />
    </section>

    <section>
      <title>Specifications</title>

      <indexterm class="startofrange" id="ix.syntax.specifications">
        <primary>Syntax Specification</primary>

        <secondary>Specifications</secondary>
      </indexterm>

      <para>The entries below would normally be found exclusively in a
      Specification file.</para>

      <formalpara>
        <title>it</title>

        <indexterm>
          <primary>it</primary>
        </indexterm>

        <para>Captures a specification. Usually described in terms of
        should.<programlisting>it "should have an it description here", {
  // it impl here
}</programlisting></para>
      </formalpara>

      <indexterm class="endofrange" startref="ix.syntax.specifications" />
    </section>

    <section>
      <title>Common</title>

      <indexterm class="startofrange" id="ix.syntax.common">
        <primary>Syntax Specification</primary>

        <secondary>Common</secondary>
      </indexterm>

      <para>The following can be placed in both Story and Specification
      files.</para>

      <formalpara>
        <title>and (syntax replacement)</title>

        <indexterm>
          <primary>and (syntax replacement)</primary>
        </indexterm>

        <para>Used as replacement syntax for story and specification
        contstructs. Carries the connotation that it is equivalent to whatever
        the previous story or specification construct was.<programlisting>...
given "a given description here", {
  // given impl here
}

and "equivalent to another given", {
  // another given impl here
}
...</programlisting></para>
      </formalpara>

      <formalpara>
        <title>and (assertion chain)</title>

        <indexterm>
          <primary>and (assertion chain)</primary>
        </indexterm>

        <para>Used to logically tie together assertion statements.
        <programlisting>true.shouldBe true
and
false.shouldBe false</programlisting></para>
      </formalpara>

      <formalpara>
        <title>before</title>

        <indexterm>
          <primary>before</primary>
        </indexterm>

        <para>Actions to be taken before any Story or Scenario components are
        run. Usually used for boilerplate setup common to all scenarios or
        specifications in that file. Placement should be prior to any
        scenarios (in a story) or specifications.<programlisting>...
before "a before description here", {
  // before impl here
}
...</programlisting></para>
      </formalpara>

      <formalpara>
        <title>before_each</title>

        <indexterm>
          <primary>before_each</primary>
        </indexterm>

        <para>Actions to be taken before every Story or Scenario component is
        run. Usually used for boilerplate setup common to all scenarios or
        specifications in that file. Placement should be prior to any
        scenarios (in a story) or specifications.<programlisting>...
before_each "a before_each description here", {
  // before_each impl here
}
...</programlisting></para>
      </formalpara>

      <formalpara>
        <title>after</title>

        <indexterm>
          <primary>after</primary>
        </indexterm>

        <para>Actions to be taken after any Story or Scenario components are
        run. Usually used for boilerplate setup common to all scenarios or
        specifications in that file. Placement should be prior to any
        scenarios (in a story) or specifications.<programlisting>...
after "an after description here", {
  // after impl here
}
...</programlisting></para>
      </formalpara>

      <formalpara>
        <title>after_each</title>

        <indexterm>
          <primary>after_each</primary>
        </indexterm>

        <para>Actions to be taken after every Story or Scenario component is
        run. Placement should be prior to any scenarios (in a story) or
        specifications.<programlisting>...
after_each "an after_each description here", {
  // after_each impl here
}
...</programlisting></para>
      </formalpara>

      <indexterm class="endofrange" startref="ix.syntax.common" />
    </section>

    <section>
      <title>Assertions</title>

      <indexterm class="startofrange" id="ix.syntax.assertions">
        <primary>Syntax Specification</primary>

        <secondary>Assertions</secondary>
      </indexterm>

      <para />

      <section>
        <title>should</title>

        <para />

        <itemizedlist>
          <listitem>
            <para>shouldBe</para>
          </listitem>

          <listitem>
            <para>shouldEqual</para>
          </listitem>

          <listitem>
            <para>shouldBeEqual</para>
          </listitem>

          <listitem>
            <para>shouldBeEqualTo</para>
          </listitem>

          <listitem>
            <para>shouldNotBe</para>
          </listitem>

          <listitem>
            <para>shouldNotEqual</para>
          </listitem>

          <listitem>
            <para>shouldNotBeEqual</para>
          </listitem>

          <listitem>
            <para>shouldNotBeEqualTo</para>
          </listitem>

          <listitem>
            <para>shouldBeA</para>
          </listitem>

          <listitem>
            <para>shouldBeAn</para>
          </listitem>

          <listitem>
            <para>shouldNotBeA</para>
          </listitem>

          <listitem>
            <para>shouldNotBeAn</para>
          </listitem>

          <listitem>
            <para>shouldBeGreaterThan</para>
          </listitem>

          <listitem>
            <para>shouldBeLessThan</para>
          </listitem>

          <listitem>
            <para>shouldHave</para>
          </listitem>

          <listitem>
            <para>shouldNotHave</para>
          </listitem>
        </itemizedlist>

        <indexterm class="endofrange" startref="ix.syntax.assertions" />
      </section>

      <section>
        <title>ensure</title>

        <indexterm class="startofrange" id="ix.syntax.ensure">
          <primary>Syntax Specification</primary>

          <secondary>ensure</secondary>
        </indexterm>

        <para />

        <itemizedlist>
          <listitem>
            <para>isNull</para>
          </listitem>

          <listitem>
            <para>isNotNull</para>
          </listitem>

          <listitem>
            <para>isA&lt;class type&gt;</para>
          </listitem>

          <listitem>
            <para>isEqualTo(value)</para>
          </listitem>

          <listitem>
            <para>isEqualTo&lt;value&gt;</para>
          </listitem>

          <listitem>
            <para>isNotEqualTo(value)</para>
          </listitem>

          <listitem>
            <para>isNotEqualTo&lt;value&gt;</para>
          </listitem>

          <listitem>
            <para>isTrue</para>
          </listitem>

          <listitem>
            <para>isFalse</para>
          </listitem>
        </itemizedlist>

        <indexterm class="endofrange" startref="ix.syntax.ensure" />
      </section>

      <section>
        <title>common</title>

        <para />

        <itemizedlist>
          <listitem>
            <para>contains</para>
          </listitem>

          <listitem>
            <para>has</para>
          </listitem>

          <listitem>
            <para>ensureThrows</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>

    <indexterm class="endofrange" startref="ix.syntax" />
  </chapter>

  <chapter>
    <title>Appendix</title>

    <section>
      <title>Glossary<anchor id="glossary" /></title>

      <glosslist>
        <glossentry>
          <glossterm>BDD</glossterm>

          <glossdef>
            <para>See Behavior Driven Development</para>
          </glossdef>
        </glossentry>

        <glossentry>
          <glossterm>Behavior Driven Development</glossterm>

          <glossdef>
            <para>Agile software development technique that encourages
            collaboration between developers, QA and non-technical or business
            participants in a software project. It was originally conceived in
            2003 by Dan North [1] as a response to Test Driven Development,
            and has evolved over the last few years. The focus of BDD is the
            language and interactions used in the process of software
            development. Behavior-driven developers use their native language
            in combination with the ubiquitous language of Domain Driven
            Design to describe the purpose and benefit of their code. This
            allows the developers to focus on why the code should be created,
            rather than the technical details, and minimizes translation
            between the technical language in which the code is written and
            the domain language spoken by the business, users, stakeholders,
            project management etc. (Courtesy:
            http://en.wikipedia.org/wiki/Behavior_driven_development)</para>
          </glossdef>
        </glossentry>

        <glossentry>
          <glossterm>Story</glossterm>

          <glossdef>
            <para>Description of a requirement, which has an associated
            benefit and criteria for validation. Contains any of the following
            components: scenario, given, when then. It also may contain a
            narrative with the following components: narrative, as_a, i_want,
            so_that.</para>
          </glossdef>
        </glossentry>
      </glosslist>

      <para></para>
    </section>
  </chapter>

  <index></index>
</book>
